{"version":3,"sources":["jsLogger-1.0.js"],"names":["jsLogger","initialize","options","_url","LoggingUrl","_defaultURL","_defaultMaxLogs","MaxLogsBeforeDump","dumpLogs","DumpLogsOverride","log","type","system","operation","jsLoggerData","forceLog","jsLogStorage","AddLog","System","Operation","LogType","Timestamp","getFormattedTimestamp","Message","message","_count","GetCount","_maxLogs","IsFull","logData","JSON","stringify","GetLogs","_date","Date","_formattedDate","getMonth","getDate","getYear","getHours","getMinutes","getSeconds","getMilliseconds","request","XMLHttpRequest","open","setRequestHeader","length","send","isEmpty","_storageBin","undefined","addLog","LogIndex","getCount","push","getLogs","maxItemsToGet","splice","isFull","maxItems","emptyStorage","maxItemsToRemove","IsEmpty","EmptyStorage","parseError","error","number","name","description","getMessage","_message","getData","getDataFromError","GetData","GetDataFromError","MakeLog","Init","JSLog","this","JSLogger"],"mappings":"CAAA,WAEI,GAAIA,GAAW,WASX,QAASC,GAAWC,GACZA,IACAC,EAAOD,EAAQE,YAAcC,EAC7BC,EAAkBJ,EAAQK,mBAAqBD,EAC/CE,EAAWN,EAAQO,kBAAoBD,GAc/C,QAASE,GAAIC,EAAMC,EAAQC,EAAWC,EAAcC,GAahD,GAXAC,EAAaC,QACTC,OAAQN,EACRO,UAAWN,EACXO,QAAST,EACTU,UAAWC,IACXC,QAAST,EAAaU,UAMtBT,EAAU,CACV,GAAIU,GAAST,EAAaU,UAEtBC,GADAF,EAAS,EACEA,EAEA,MAIfE,GAAWrB,CAMf,IAAIU,EAAaY,OAAOD,GAAW,CAC/B,GAAIE,GAAUC,KAAKC,UAAUf,EAAagB,QAAQL,GAClDnB,GAASqB,IAWjB,QAASP,KACL,GAAIW,GAAQ,GAAIC,MACZC,EAAiBF,EAAMG,WAAa,EAAI,IAAMH,EAAMI,UAAY,IAAMJ,EAAMK,UAAY,IAAML,EAAMM,WAAa,IAAMN,EAAMO,aAAe,IAAMP,EAAMQ,aAAe,IAAMR,EAAMS,iBACvL,OAAOP,GArEX,GAEIhC,GAGAwB,EALAtB,EAAc,+BAIdC,EAAkB,GAsDlBE,EAAW,SAAUqB,GACrB,GAAIc,GAAU,GAAIC,eAClBD,GAAQE,KAAK,OAAQ1C,GAAOY,UAC5B4B,EAAQG,iBAAiB,eAAgB,mCACzCH,EAAQG,iBAAiB,iBAAkBjB,EAAQkB,QACnDJ,EAAQK,KAAKnB,IASbb,EAAe,WAGf,QAASiC,KACL,MAAoB,QAAhBC,GAAwCC,SAAhBD,GAAoD,IAAvBA,EAAYH,OAOzE,QAASK,GAAO1C,GACRuC,MACAC,MAEJxC,EAAI2C,SAAWC,IACfJ,EAAYK,KAAK7C,GAIrB,QAAS8C,GAAQC,GASb,MARIR,OACAC,MAGAO,EAAgBP,EAAYH,SAC5BU,EAAgBP,EAAYH,QAGzBG,EAAYQ,OAAO,EAAGD,GAIjC,QAASE,GAAOC,GAKZ,MAJIX,OACAC,MAGAA,EAAYH,QAAUa,EAQ9B,QAASC,GAAaC,GACdb,MACAC,MAGAA,EAAYH,QAAUe,EACtBZ,EAAYQ,OAAO,EAAGI,GAEtBZ,KAKR,QAASI,KAIL,MAHIL,OACAC,MAEGA,EAAYH,OA9DvB,GAAIG,EAgEJ,QACIa,QAASd,EACThC,OAAQmC,EACRpB,QAASwB,EACT5B,OAAQ+B,EACRK,aAAcH,EACdnC,SAAU4B,MAIdxC,EAAe,WAGf,QAASmD,GAAWC,GAChB,MAAc,QAAVA,GAA4Bf,SAAVe,EACX,6DAEe,OAAlBA,EAAM1C,QACC0C,EAEA,WAAaA,EAAMC,OAAS,UAAYD,EAAME,KAAO,aAAeF,EAAM1C,QAAU,iBAAmB0C,EAAMG,YAAc,KAI9I,QAASC,KACL,MAAOC,GAEX,QAASC,GAAQhD,GAEb,MADA+C,GAAW/C,GACFA,QAAW8C,KAExB,QAASG,GAAiBP,GACtB,MAAOM,GAAQP,EAAWC,IArB9B,GAAIK,EAwBJ,QACIG,QAASF,EACTG,iBAAkBF,KAI1B,QACIG,QAASlE,EACTmE,KAAM5E,EACN6E,MAAOhE,KAIfiE,MAAKC,SAAWhF","file":"jsLogger-1.0.min.js","sourcesContent":["(function () {\n    //Object to handle all the Javascript logging functions\n    var jsLogger = function () {\n        //controller/action to handle the logging on the code side\n        var _defaultURL = '../App/Utility/JavaScriptLog';\n        //This is your default controller action for MVC 4 ajax call in case init fails\n        var _url;\n        //default number of logs before we attempt a write\n        var _defaultMaxLogs = 10;\n        var _maxLogs;\n\n        function initialize(options) {\n            if (options) {\n                _url = options.LoggingUrl || _defaultURL;\n                _defaultMaxLogs = options.MaxLogsBeforeDump || _defaultMaxLogs;\n                dumpLogs = options.DumpLogsOverride || dumpLogs;\n            }\n            //This is used so that on init in view you can use the URL helper to create a url based on the controller and action\n        }\n\n        //function that actually writes the logs to the controller action\n        //type: \"INFO\",\"DEBUG\",\"ERROR\"\n        //system: whatever the parent class/page is that is calling this\n        //operation: whatever function/method is calling this\n        //jsLoggerData: JSLoggerData object\n        //forceLog: True if you want to write the log immediately,\n        //-false if it will use the default cache number\n        //-this will also force the ajax to be synchronous if it is True, and async if False\n        //-so that we push the logs before anything else happens\n        function log(type, system, operation, jsLoggerData, forceLog) {\n\n            jsLogStorage.AddLog({\n                System: system,\n                Operation: operation,\n                LogType: type,\n                Timestamp: getFormattedTimestamp(),\n                Message: jsLoggerData.message\n            });\n\n            //if caller wants to force a log dump, we will set the 'maxLogs' variable to the current length\n            //This is so there is no specific behaviour, we just change the max log number to be the current log number\n            //so that the standard functionality will happen\n            if (forceLog) {\n                var _count = jsLogStorage.GetCount();\n                if (_count > 0) {\n                    _maxLogs = _count;\n                } else {\n                    _maxLogs = 1;\n                }\n            } else {\n                //otherwise, just set it to the default\n                _maxLogs = _defaultMaxLogs;\n            }\n\n            //If we have reached our specified capacity then write it out\n            //Take note of the async part, if we are 'forcing' a log output then we want it to be synchronous to ensure it gets there\n            //before anything else happens\n            if (jsLogStorage.IsFull(_maxLogs)) {\n                var logData = JSON.stringify(jsLogStorage.GetLogs(_maxLogs));\n                dumpLogs(logData);\n            }\n        }\n        var dumpLogs = function (logData) {\n            var request = new XMLHttpRequest();\n            request.open(\"POST\", _url, !forceLog);\n            request.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n            request.setRequestHeader(\"Content-length\", logData.length);\n            request.send(logData);\n        };\n        //Returns the current timestamp in a specified format\n        function getFormattedTimestamp() {\n            var _date = new Date();\n            var _formattedDate = _date.getMonth() + 1 + \"-\" + _date.getDate() + \"-\" + _date.getYear() + \" \" + _date.getHours() + \":\" + _date.getMinutes() + \":\" + _date.getSeconds() + \":\" + _date.getMilliseconds();\n            return _formattedDate;\n        }\n\n        var jsLogStorage = function () {\n            var _storageBin;\n            //Check if the storage is empty, null or undefined and return true/false\n            function isEmpty() {\n                if (_storageBin === null || _storageBin === undefined || _storageBin.length === 0) {\n                    return true;\n                }\n\n                return false;\n            }\n            //Push a log object into the storage\n            function addLog(log) {\n                if (isEmpty()) {\n                    _storageBin = [];\n                }\n                log.LogIndex = getCount(); //Sets the index of our log that we are pushing in\n                _storageBin.push(log);\n            }\n\n            //Get a splice from the array from 0->n, where n = maxItemsToGet\n            function getLogs(maxItemsToGet) {\n                if (isEmpty()) {\n                    _storageBin = [];\n                }\n\n                if (maxItemsToGet > _storageBin.length) {\n                    maxItemsToGet = _storageBin.length;\n                }\n\n                return _storageBin.splice(0, maxItemsToGet);\n            }\n\n            //Check to see if the storage is at specified capacity\n            function isFull(maxItems) {\n                if (isEmpty()) {\n                    _storageBin = []; //Just to ensure that it is something we can get the length of\n                }\n\n                if (_storageBin.length >= maxItems) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            //Drop all the elements from storage up to the max number of items\n            function emptyStorage(maxItemsToRemove) {\n                if (isEmpty()) {\n                    _storageBin = []; //Just to ensure that it is something we can get the length of\n                }\n\n                if (_storageBin.length <= maxItemsToRemove) {\n                    _storageBin.splice(0, maxItemsToRemove);\n                } else {\n                    _storageBin = [];\n                }\n            }\n\n            //Get the count of all the log records in storage\n            function getCount() {\n                if (isEmpty()) {\n                    _storageBin = []; //Just to ensure that it is something we can get the length of\n                }\n                return _storageBin.length;\n            }\n            return {\n                IsEmpty: isEmpty,\n                AddLog: addLog,\n                GetLogs: getLogs,\n                IsFull: isFull,\n                EmptyStorage: emptyStorage,\n                GetCount: getCount\n            };\n        }();\n\n        var jsLoggerData = function () {\n            var _message;\n\n            function parseError(error) {\n                if (error === null || error === undefined) {\n                    return \"There was an unknown error trying to perform an operation.\";\n                } else {\n                    if (error.message === null) {\n                        return error;\n                    } else {\n                        return \"[Number(\" + error.number + \")-Name(\" + error.name + \")-Message(\" + error.message + \")-Description(\" + error.description + \")]\";\n                    }\n                }\n            }\n            function getMessage() {\n                return _message;\n            }\n            function getData(message) {\n                _message = message;\n                return { \"message\": getMessage() };\n            }\n            function getDataFromError(error) {\n                return getData(parseError(error));\n            }\n\n            return {\n                GetData: getData,\n                GetDataFromError: getDataFromError\n            };\n        }();\n\n        return {\n            MakeLog: log,\n            Init: initialize,\n            JSLog: jsLoggerData\n        };\n    }();\n\n    this.JSLogger = jsLogger;\n})();"],"sourceRoot":"/source/"}